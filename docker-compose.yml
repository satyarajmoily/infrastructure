# AI Agent Platform - Centralized Docker Compose Configuration
# Single configuration file for all agents with centralized settings

version: '3.8'

services:
  # Target Services
  market-predictor:
    build: 
      context: ../market-predictor
      dockerfile: Dockerfile
    container_name: market-predictor
    ports:
      - "8000:8000"
    env_file:
      - .env  # Centralized environment
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - SERVICE_NAME=market-predictor
    volumes:
      - ./logs/predictor:/app/logs
      - ../market-predictor/src:/app/src
    networks:
      - ai-agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # AI Agents  
  devops-ai-agent:
    build: 
      context: ../devops-ai-agent
      dockerfile: Dockerfile
    container_name: devops-ai-agent
    ports:
      - "8001:8001"
    env_file:
      - .env  # Centralized environment
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8001
      - SERVICE_NAME=devops-ai-agent
      - PLATFORM_CONFIG=/config/platform.yml
      - REPOSITORIES_CONFIG=/config/repositories.yml
      - AGENTS_CONFIG=/config/agents.yml
      - SAFETY_MODE=true
      - MONITORING_INTERVAL=30
      - PROMETHEUS_URL=http://prometheus:9090
      - ALERTMANAGER_URL=http://alertmanager:9093
      # LLM Configuration (temporary fix until universal config works)
      - LLM_PROVIDER=openai
      - LLM_MODEL=gpt-4.1-nano-2025-04-14
      - LLM_TEMPERATURE=0.1
      - LLM_MAX_TOKENS=4000
      - LLM_TIMEOUT=60
    volumes:
      - ./logs/agent:/app/logs
      - ./config:/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ai-agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      - prometheus
      - alertmanager

  coding-ai-agent:
    build: 
      context: ../coding-ai-agent
      dockerfile: docker/Dockerfile
    container_name: coding-ai-agent
    ports:
      - "8002:8002"
    env_file:
      - .env  # Centralized environment
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8002
      - SERVICE_NAME=coding-ai-agent
      - PLATFORM_CONFIG=/config/platform.yml
      - REPOSITORIES_CONFIG=/config/repositories.yml
      - AGENTS_CONFIG=/config/agents.yml
      - WORKSPACE_BASE_PATH=/tmp/coding-agent-workspaces
    volumes:
      - ./logs/coding-agent:/app/logs
      - ./config:/config
      - coding-agent-workspaces:/tmp/coding-agent-workspaces
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ai-agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      - devops-ai-agent

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus-data:/prometheus
    networks:
      - ai-agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - ai-agent-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - ai-agent-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Log Management
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - ai-agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 3

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - ./logs:/var/log/services
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - ai-agent-network
    restart: unless-stopped
    depends_on:
      - loki

  # Development and Testing Tools
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./monitoring/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./monitoring/nginx/ssl:/etc/nginx/ssl
    networks:
      - ai-agent-network
    restart: unless-stopped
    depends_on:
      - market-predictor
      - devops-ai-agent
      - coding-ai-agent
      - grafana
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ai-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  loki-data:
    driver: local
  coding-agent-workspaces:
    driver: local
