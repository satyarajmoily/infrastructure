# AI Agent Team Platform - Docker Compose Configuration
# Infrastructure orchestration for the AI agent ecosystem

# Core AI Agent Services
market-predictor:
  build: 
    context: ../market-predictor                    # Reference separate repo
    dockerfile: Dockerfile
  container_name: market-predictor
  ports:
    - "8000:8000"
  environment:
    - API_HOST=0.0.0.0
    - API_PORT=8000
    - ENVIRONMENT=development
    - LOG_LEVEL=INFO
  volumes:
    - ./logs/predictor:/app/logs
    - ../market-predictor/src:/app/src              # Development hot reload
  networks:
    - ai-agent-network
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    interval: 10s
    timeout: 5s
    retries: 3
    start_period: 30s
  depends_on:
    - prometheus
  labels:
    - "monitoring.service=market-predictor"
    - "monitoring.port=8000"
    - "ai-agent.type=target-service"

devops-ai-agent:
  build: 
    context: ../devops-ai-agent                     # Reference separate repo
    dockerfile: Dockerfile
  container_name: devops-ai-agent
  ports:
    - "8001:8001"
  environment:
    - API_HOST=0.0.0.0
    - API_PORT=8001
    - SERVICE_NAME=devops-ai-agent
    - ENVIRONMENT=development
    - LOG_LEVEL=INFO
    - PLATFORM_MODE=multi_repo                      # Enable platform mode
    - REPOSITORIES_CONFIG=/config/repositories.yml  # Persistent config
    - AGENTS_CONFIG=/config/agents.yml
    - PROMETHEUS_URL=http://prometheus:9090
    - ALERTMANAGER_URL=http://alertmanager:9093
  env_file:
    - ../devops-ai-agent/.env
  volumes:
    - ./logs/agent:/app/logs
    - ./config:/config                              # Mount persistent config
    - /var/run/docker.sock:/var/run/docker.sock     # Docker API access
  networks:
    - ai-agent-network
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
    interval: 10s
    timeout: 5s
    retries: 3
    start_period: 30s
  depends_on:
    - prometheus
    - alertmanager
  labels:
    - "monitoring.service=devops-ai-agent"
    - "monitoring.port=8001"
    - "ai-agent.type=platform-agent"

coding-ai-agent:
  build: 
    context: ../coding-ai-agent                     # Reference separate repo
    dockerfile: docker/Dockerfile
  container_name: coding-ai-agent
  ports:
    - "8002:8002"
  environment:
    - API_HOST=0.0.0.0
    - API_PORT=8002
    - SERVICE_NAME=coding-ai-agent
    - ENVIRONMENT=development
    - LOG_LEVEL=INFO
    - PLATFORM_MODE=multi_repo                      # Enable platform mode
    - REPOSITORIES_CONFIG=/config/repositories.yml  # Persistent config
    - AGENTS_CONFIG=/config/agents.yml
    - ALLOWED_FILE_TYPES=[".py",".md",".txt",".json",".yml",".yaml",".toml"]
    - CORS_ORIGINS=["*"]
    - LLM_MODEL=gpt-4o
    - WORKSPACE_BASE_PATH=/tmp/coding-agent-workspaces
  env_file:
    - ../coding-ai-agent/.env
  volumes:
    - ./logs/coding-agent:/app/logs
    - ./config:/config                              # Mount persistent config
    - coding-agent-workspaces:/tmp/coding-agent-workspaces
    - /var/run/docker.sock:/var/run/docker.sock     # Docker API access
  networks:
    - ai-agent-network
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
    interval: 10s
    timeout: 5s
    retries: 3
    start_period: 30s
  depends_on:
    - devops-ai-agent
  labels:
    - "monitoring.service=coding-ai-agent"
    - "monitoring.port=8002"
    - "ai-agent.type=platform-agent"

# Universal Monitoring Stack
prometheus:
  image: prom/prometheus:v2.48.0
  container_name: prometheus
  ports:
    - "9090:9090"
  command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.console.libraries=/etc/prometheus/console_libraries'
    - '--web.console.templates=/etc/prometheus/consoles'
    - '--storage.tsdb.retention.time=200h'
    - '--web.enable-lifecycle'
    - '--web.enable-admin-api'
  volumes:
    - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    - ./monitoring/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml
    - prometheus-data:/prometheus
  networks:
    - ai-agent-network
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
    interval: 10s
    timeout: 5s
    retries: 3
  labels:
    - "ai-agent.type=monitoring"

alertmanager:
  image: prom/alertmanager:v0.26.0
  container_name: alertmanager
  ports:
    - "9093:9093"
  volumes:
    - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    - alertmanager-data:/alertmanager
  command:
    - '--config.file=/etc/alertmanager/alertmanager.yml'
    - '--storage.path=/alertmanager'
  networks:
    - ai-agent-network
  restart: unless-stopped
  depends_on:
    - prometheus
  healthcheck:
    test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
    interval: 10s
    timeout: 5s
    retries: 3
  labels:
    - "ai-agent.type=monitoring"

grafana:
  image: grafana/grafana:10.2.0
  container_name: grafana
  ports:
    - "3000:3000"
  environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin123
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_INSTALL_PLUGINS=grafana-piechart-panel
  volumes:
    - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    - grafana-data:/var/lib/grafana
  networks:
    - ai-agent-network
  restart: unless-stopped
  depends_on:
    - prometheus
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    interval: 10s
    timeout: 5s
    retries: 3
  labels:
    - "ai-agent.type=monitoring"

# Log Management
loki:
  image: grafana/loki:2.9.0
  container_name: loki
  ports:
    - "3100:3100"
  command: -config.file=/etc/loki/local-config.yaml
  volumes:
    - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml
    - loki-data:/loki
  networks:
    - ai-agent-network
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
    interval: 10s
    timeout: 5s
    retries: 3
  labels:
    - "ai-agent.type=monitoring"

promtail:
  image: grafana/promtail:2.9.0
  container_name: promtail
  volumes:
    - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/config.yml
    - ./logs:/var/log/services
    - /var/log:/var/log/host:ro
  command: -config.file=/etc/promtail/config.yml
  networks:
    - ai-agent-network
  restart: unless-stopped
  depends_on:
    - loki
  labels:
    - "ai-agent.type=monitoring"

# Reverse Proxy and Load Balancer
nginx:
  image: nginx:1.25-alpine
  container_name: nginx-proxy
  ports:
    - "80:80"
    - "443:443"
  volumes:
    - ./monitoring/nginx/nginx.conf:/etc/nginx/nginx.conf
    - ./monitoring/nginx/ssl:/etc/nginx/ssl
  networks:
    - ai-agent-network
  restart: unless-stopped
  depends_on:
    - coding-ai-agent
    - devops-ai-agent
    - grafana
  healthcheck:
    test: ["CMD", "nginx", "-t"]
    interval: 30s
    timeout: 10s
    retries: 3
  labels:
    - "ai-agent.type=infrastructure"

networks:
  ai-agent-network:
    driver: bridge
    name: ai-agent-platform
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
    driver: local
    name: ai-agent-prometheus-data
  grafana-data:
    driver: local
    name: ai-agent-grafana-data
  alertmanager-data:
    driver: local
    name: ai-agent-alertmanager-data
  loki-data:
    driver: local
    name: ai-agent-loki-data
  coding-agent-workspaces:
    driver: local
    name: ai-agent-workspaces

# Platform Configuration
# This docker-compose.yml automatically loads repository configuration from:
# - config/repositories.yml (target repositories)
# - config/agents.yml (agent configurations)
#
# Agents will automatically discover and manage all configured repositories
# Add new repositories with: ./scripts/add-repository.sh

# Override for development
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up 